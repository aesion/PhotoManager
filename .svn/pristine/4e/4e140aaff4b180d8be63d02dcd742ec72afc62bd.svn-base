package com.pulamsi.photomanager.viewHolder;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.view.ViewGroup;
import android.widget.ImageView;

import com.jude.easyrecyclerview.adapter.BaseViewHolder;
import com.pulamsi.photomanager.R;
import com.pulamsi.photomanager.utils.DensityUtil;

import java.io.File;

/**
 * User: Daidingkang(ddk19941017@Gmail.com)
 * Date: 2017-01-09
 * Time: 12:32
 * FIXME
 */
public class DownloadViewHolder extends BaseViewHolder<String> {

    ImageView img;

    public DownloadViewHolder(ViewGroup viewGroup) {
        super(viewGroup, R.layout.download_item);//Item的布局写在这里
        img = $(R.id.iv_img);
    }

    @Override
    public void setData(String data) {
        super.setData(data);
        if (!new File(data).exists()){
            return;
        }

        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;

        Bitmap bitmap = BitmapFactory.decodeFile(data, options);
        int imageHeight = options.outHeight;
        int imageWidth = options.outWidth;

        ViewGroup.LayoutParams layoutParams = img.getLayoutParams();
        layoutParams.height = imageHeight * (DensityUtil.getWidth() / 2) / imageWidth;//这一句很重要
//            int height = data.getHeight()*width/data.getWidth();//计算View的高度
        img.setLayoutParams(layoutParams);

        img.setImageBitmap(adjustImage(data));
    }



    private Bitmap adjustImage(String absolutePath) {
        BitmapFactory.Options opt = new BitmapFactory.Options();
        // 这个isjustdecodebounds很重要
        opt.inJustDecodeBounds = true;
        Bitmap bm = BitmapFactory.decodeFile(absolutePath, opt);

        // 获取到这个图片的原始宽度和高度
        int picWidth = opt.outWidth;
        int picHeight = opt.outHeight;

        // isSampleSize是表示对图片的缩放程度，比如值为2图片的宽度和高度都变为以前的1/2
        opt.inSampleSize = 1;
        // 根据屏的大小和图片大小计算出缩放比例
        if (picWidth > picHeight) {
            if (picWidth > DensityUtil.getWidth())
                opt.inSampleSize = picWidth / DensityUtil.getWidth();
        } else {
            if (picHeight > DensityUtil.getHeight())

                opt.inSampleSize = picHeight / DensityUtil.getHeight();
        }

        // 这次再真正地生成一个有像素的，经过缩放了的bitmap
        opt.inJustDecodeBounds = false;
        bm= BitmapFactory.decodeFile(absolutePath, opt);

        // 用imageview显示出bitmap
        return bm;
    }
}
