package com.pulamsi.photomanager.prestener;

import android.widget.Toast;

import com.android.volley.Request;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.litesuits.android.log.Log;
import com.pulamsi.photomanager.R;
import com.pulamsi.photomanager.bean.DefaultResult;
import com.pulamsi.photomanager.base.MyApplication;
import com.pulamsi.photomanager.bean.Galleryclass;
import com.pulamsi.photomanager.bean.PasterLabel;
import com.pulamsi.photomanager.helper.retrofit.RetrofitApi;
import com.pulamsi.photomanager.interfaces.IUploadActivity;
import com.pulamsi.photomanager.utils.DialogUtils;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.Callback;

/**
 * User: Daidingkang(ddk19941017@Gmail.com)
 * Date: 2016-11-11
 * Time: 15:04
 * FIXME
 */
public class UploadActivityPrestener extends BasePrestener {

    IUploadActivity iUploadActivity;

    public UploadActivityPrestener(IUploadActivity iUploadActivity) {
        this.iUploadActivity = iUploadActivity;
    }

    public void requestData() {
        iUploadActivity.showLoading();
        RequestClassify();
        RequestHotTag();

    }

    private void RequestHotTag() {
        String url = getString(R.string.serverbaseurl) + getString(R.string.getDefaultLabel);
        StringRequest stringRequest = new StringRequest(Request.Method.POST, url, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                if (response == null)
                    return;
                try {
                    Gson gson = new Gson();
                    List<PasterLabel> pasterLabelList = gson.fromJson(response, new TypeToken<List<PasterLabel>>() {
                    }.getType());
                    iUploadActivity.initHotTag(pasterLabelList);
                    iUploadActivity.showContent();
                } catch (Exception e) {
                    e.printStackTrace();
                    Log.e("", "标签包装出错");
                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                iUploadActivity.showError();
                Log.i(error.toString());
            }
        });
        MyApplication.requestQueue.add(stringRequest);
    }

    private void RequestClassify() {
        /**
         * 参数：mid 会员id
         返回参数：list 、cid 、 title
         */
        String url = getString(R.string.serverbaseurl) + getString(R.string.showPasterCat);
        StringRequest stringRequest = new StringRequest(Request.Method.POST, url, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                if (response == null)
                    return;
                try {
                    Gson gson = new Gson();
                    List<Galleryclass> galleryList = gson.fromJson(response, new TypeToken<List<Galleryclass>>() {
                    }.getType());
                    iUploadActivity.initClassify(galleryList);
                    iUploadActivity.showContent();
                } catch (Exception e) {
                    e.printStackTrace();
                    Log.e("", "分类包装出错");
                }

            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                iUploadActivity.showError();
                Log.i(error.toString());
            }
        });
        MyApplication.requestQueue.add(stringRequest);
    }


    public void commit(ArrayList<String> data,Map<String, String> maps) {
        DialogUtils.showLoading("正在上传中...",iUploadActivity.getContext());
        MultipartBody.Part[] parts = new MultipartBody.Part[data.size()];//多张图片参数
        for (int i = 0; i < data.size(); i++) {
            File file = new File(data.get(i));//创建File
            RequestBody requestFile = RequestBody.create(MediaType.parse("multipart/form-data"), file);
            parts[i] = MultipartBody.Part.createFormData("file", file.getName(), requestFile);
        }

        RetrofitApi.init().updateImage(parts,maps).enqueue(new Callback<DefaultResult>() {
            @Override
            public void onResponse(Call<DefaultResult> call, retrofit2.Response<DefaultResult> response) {
                DialogUtils.hideLoading();
                Toast.makeText(iUploadActivity.getContext(), response.message(), Toast.LENGTH_SHORT).show();
                Toast.makeText(iUploadActivity.getContext(), response.code() + "", Toast.LENGTH_SHORT).show();
                DefaultResult defaultResult = response.body();
            }

            @Override
            public void onFailure(Call<DefaultResult> call, Throwable t) {
                DialogUtils.hideLoading();
                Toast.makeText(iUploadActivity.getContext(), t.toString() + "", Toast.LENGTH_SHORT).show();
            }
        });

    }

}
